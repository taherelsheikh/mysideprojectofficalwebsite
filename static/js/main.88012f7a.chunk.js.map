{"version":3,"sources":["Assets/MySideProjectLogo.jpeg","logo.svg","Components/Hero.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Hero","className","src","SideProjectLogo","style","fontWeight","href","target","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,gD,uECA3CD,EAAOC,QAAU,IAA0B,kC,6HCqE5BC,MAjEf,WACE,OACE,yBAAKC,UAAU,QACb,yBAAKA,UAAU,aACb,yBAAKC,IAAKC,IAAiBF,UAAU,oBAAqB,KAE5D,yBAAKA,UAAU,YACb,uBAAGA,UAAU,aAAb,KACI,0BAAMG,MAAO,CAAEC,WAAY,QAA3B,WADJ,gFAIA,uBAAGJ,UAAU,aAAb,4BAC4B,IAC1B,0BAAMG,MAAO,CAAEC,WAAY,QAA3B,MAFF,sCAGc,0BAAMD,MAAO,CAAEC,WAAY,QAA3B,kBAEd,uBAAGJ,UAAU,aAAb,YACY,IACV,uBACEK,KAAK,wCACLC,OAAO,SACPN,UAAU,sBAHZ,kBAMK,IARP,IASI,IACF,uBACEK,KAAK,oCACLC,OAAO,SACPN,UAAU,sBAHZ,eAQF,uBAAGA,UAAU,aAAb,YACY,IACV,uBACEA,UAAU,qBACVK,KAAK,qEACLC,OAAO,UAHT,SAFF,IASI,IACF,uBACEN,UAAU,qBACVK,KAAK,uDACLC,OAAO,UAHT,WAMK,IAhBP,IAiBI,IACF,uBACEN,UAAU,qBACVK,KAAK,4FACLC,OAAO,UAHT,cC5CKC,MARf,WACE,OACE,yBAAKP,UAAU,OACd,kBAAC,EAAD,QCKeQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.88012f7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/MySideProjectLogo.a180f2e9.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./Hero.css\";\nimport SideProjectLogo from \"../Assets/MySideProjectLogo.jpeg\";\n\nfunction Hero() {\n  return (\n    <div className=\"Hero\">\n      <div className=\"HeroImage\">\n        <img src={SideProjectLogo} className=\"SideProjectLogo\" />{\" \"}\n      </div>\n      <div className=\"HeroText\">\n        <p className=\"HeroTextP\">\n          A <text style={{ fontWeight: \"700\" }}>podcast</text> about tech &\n          design founders who took their side project to the next level.\n        </p>\n        <p className=\"HeroTextP\">\n          The show focuses on early{\" \"}\n          <text style={{ fontWeight: \"700\" }}>YC</text> companies and upvoted\n          products on <text style={{ fontWeight: \"700\" }}>Product Hunt.</text>\n        </p>\n        <p className=\"HeroTextP\">\n          Hosted by{\" \"}\n          <a\n            href=\"https://www.twitter.com/TAHERELSHEIKH\"\n            target=\"_blank\"\n            className=\"TitleTextStyleLink\"\n          >\n            @TAHERELSHEIKH\n          </a>{\" \"}\n          &{\" \"}\n          <a\n            href=\"https://www.twitter.com/DonjiKong\"\n            target=\"_blank\"\n            className=\"TitleTextStyleLink\"\n          >\n            @DonjiKong\n          </a>\n        </p>\n        <p className=\"HeroTextP\">\n          Listen on{\" \"}\n          <a\n            className=\"TitleTextStyleLink\"\n            href=\"https://podcasts.apple.com/us/podcast/my-side-project/id1451687428\"\n            target=\"_blank\"\n          >\n            Apple\n          </a>\n          ,{\" \"}\n          <a\n            className=\"TitleTextStyleLink\"\n            href=\"https://open.spotify.com/show/1NsgZvuM4gArk985dNOgVt\"\n            target=\"_blank\"\n          >\n            Spotify\n          </a>{\" \"}\n          &{\" \"}\n          <a\n            className=\"TitleTextStyleLink\"\n            href=\"https://www.google.com/podcasts?feed=aHR0cHM6Ly9mZWVkcy5idXp6c3Byb3V0LmNvbS8yNTQzODcucnNz\"\n            target=\"_blank\"\n          >\n            Google\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default Hero;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Hero from './Components/Hero';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Hero/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}